=====
ADD INSTRUCTIONS FOR HOW TO RUN/USE YOUR PROGRAM HERE:
e.g. What format should we use to input data or add data to events.txt? Anything else we need to know in order to use your program?
=====

A start scene will come up when Main.java runs. All needed data is supposed to be input through the interface along with the following steps: 
1. click the center button to start  
2. type the name of a bus line or a subway line into the corresponding text box, as well as typing in the names of stops or stations on the line in the format "name1,name2,name3, ...". Each line must have a name and at least one stop/station
3. press the "Confirm" buttons will clear the text boxes; however, the data will be memorized behind. Keep inputting the stops and stations on different lines until all of them are correctly input, then press "NEXT" button (must have at least one bus line and one subway line)  
4. select a bus stop and a subway station to make them intersect each other. Select the corresponding lines and the stop name and the station name, make sure all the four choiceboxes have content in them.  
5. press "Set intersect!" button in order to set intersection between the stop and the station. Pressing it will not clear the choiceboxes. Repeating the process until all the transfer stations you want are set. Then press "READY TO GO!" button.

Now the data of the lines are already input. In the next scene, you can log in as an admin user or a cardholder. You can follow instructions included in the program to continue.





=====
LIST ALL FEATURES THAT YOU WORKED ON HERE, AND HOW TO INPUT RELEVANT DATA FOR THE FEATURE (IF APPLICABLE)
=====

FEATURE 1

Description: Tapping a card at a station

Usage Instructions: There are three cases when tapping a card. Case 1: the cardholder starts a new segment within an trip in progress. Case2: the cardholder starts the first segment in a new trip. Case 3: the cardholder ends the present segment. By tapping a card, the transit system will pull up the data about this segment and record it for the users.
 
Design Decisions: Trip class has methods that can estimate which case the tapping is in; depending on that, the system will create trips with segments for the cardholder. 


FEATURE 2

Description: Making up bus lines and subway lines 

Usage Instructions: Input the name of the stops and which line they belong to in the text boxes; the lines will be added to the transit map. Then respectively select a bus stop and a subway station to intersect them as a transfer station.

Design Decisions: Line is the superclass of BusLine and SubwayLine, containing the list of stops or stations on this line. The bus stops and subway stations are in a form of Node.


FEATURE 3

Description: Calculating and paying the cost for an trip

Usage Instructions: The user can add a trip. If a trip is reported as "finished", then the system will count the cost and remove the same amount of money from the card that is used by the cardholder during the trip. If the card has a balance under zero dollars, the card will be automatically suspended until it is charged again.

Design Decisions: Main.java includes many interfaces that has buttons related to different actions. Card class knows current balance and will switch the card status according to the change of balance immediately. The cost for a trip = bus cost + subway cost, which can be calculated through BusLine class and SubwayLine class.



FEATURE 4

Description: Client interface designed for cardholders and admin users

Usage Instructions: After the bus lines and subway lines are input correctly, the system will need the user to log in as an admin user or a cardholder; creating a new account will be required if you have not had any account for the transit system. A cardholder can easily check the card status, add balance for a card, suspend a card, or change the name for himself/herself.
                    And an admin user can check some information related to the transit system. 

Design Decisions: We created a login scene that allows the user to log in to the system as a cardholder or an admin user, or sign up a new account. The system can memorize the users' information until it is shut down. CardHolder and Card class will be called if the user clicks the buttons to modify any information. 




======

Note: If you have design decisions that don't fit under a specific feature, but are instead relevant to multiple features, feel free to include them at the bottom of this file here.

OTHER NOTES







